input createEventInput {
  data: EventInput
}

type createEventPayload {
  event: Event
}

input createRegistrationInput {
  data: RegistrationInput
}

type createRegistrationPayload {
  registration: Registration
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTestInput {
  data: TestInput
}

type createTestPayload {
  test: Test
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteEventInput {
  where: InputID
}

type deleteEventPayload {
  event: Event
}

input deleteRegistrationInput {
  where: InputID
}

type deleteRegistrationPayload {
  registration: Registration
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTestInput {
  where: InputID
}

type deleteTestPayload {
  test: Test
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  registrations(sort: String, limit: Int, start: Int, where: JSON): [Registration]
}

input EventInput {
  name: String
  registrations: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Event | createEventPayload | updateEventPayload | deleteEventPayload | Registration | createRegistrationPayload | updateRegistrationPayload | deleteRegistrationPayload | Test | createTestPayload | updateTestPayload | deleteTestPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createEvent(input: createEventInput): createEventPayload
  updateEvent(input: updateEventInput): updateEventPayload
  deleteEvent(input: deleteEventInput): deleteEventPayload
  createRegistration(input: createRegistrationInput): createRegistrationPayload
  updateRegistration(input: updateRegistrationInput): updateRegistrationPayload
  deleteRegistration(input: deleteRegistrationInput): deleteRegistrationPayload
  createTest(input: createTestInput): createTestPayload
  updateTest(input: updateTestInput): updateTestPayload
  deleteTest(input: deleteTestInput): deleteTestPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  event(id: ID!): Event
  events(sort: String, limit: Int, start: Int, where: JSON): [Event]
  registration(id: ID!): Registration
  registrations(sort: String, limit: Int, start: Int, where: JSON): [Registration]
  test(id: ID!): Test
  tests(sort: String, limit: Int, start: Int, where: JSON): [Test]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Registration {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  event: Event
  user: UsersPermissionsUser
}

input RegistrationInput {
  name: String
  event: ID
  user: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Test {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  jsonfield: JSON
}

input TestInput {
  title: String
  jsonfield: JSON
}

input updateEventInput {
  where: InputID
  data: EventInput
}

type updateEventPayload {
  event: Event
}

input updateRegistrationInput {
  where: InputID
  data: RegistrationInput
}

type updateRegistrationPayload {
  registration: Registration
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTestInput {
  where: InputID
  data: TestInput
}

type updateTestPayload {
  test: Test
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  registrations: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  registrations(sort: String, limit: Int, start: Int, where: JSON): [Registration]
}
